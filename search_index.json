[
["index.html", "The MetaRbolomics book Preface", " The MetaRbolomics book Jan Stanstrup, Corey D. Broeckling, Rick Helmus, Nils Hoffmann, Ewy Mathé, Thomas Naake, Luca Nicolotti, Kristian Peters, Johannes Rainer, Reza M. Salek, Tobias Schulze, Emma L. Schymanski, Michael A. Stravs, Etienne A Thévenot, Hendrik Treutler, Ralf J. M. Weber, Egon Willighagen, Michael Witting, Steffen Neumann Preface "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction "],
["metabolomics-data-processing-and-analysis.html", "1.1 Metabolomics data processing and analysis", " 1.1 Metabolomics data processing and analysis "],
["the-r-package-landscape.html", "1.2 The R package landscape", " 1.2 The R package landscape "],
["dependences-and-connectivity-of-metabolomics-packages.html", "1.3 Dependences and connectivity of metabolomics packages", " 1.3 Dependences and connectivity of metabolomics packages "],
["r-packages-for-metabolomics.html", "Chapter 2 R-packages for metabolomics", " Chapter 2 R-packages for metabolomics "],
["mass-spectrometry-data-handling-and-pre-processing.html", "2.1 Mass spectrometry data handling and (pre-)processing", " 2.1 Mass spectrometry data handling and (pre-)processing 2.1.1 Profile mode and centroided data 2.1.2 Direct infusion mass spectrometry data 2.1.3 Hyphenated MS and non-targeted data 2.1.4 Targeted data and alternative representations of data 2.1.5 Additional dimensionality 2.1.6 Structuring data and metadata 2.1.7 Ion species grouping and annotation "],
["metabolite-identification-with-msms-data.html", "2.2 Metabolite identification with MS/MS data", " 2.2 Metabolite identification with MS/MS data 2.2.1 MS/MS data handling, spectral matching and clustering 2.2.2 Reading of spectral databases "],
["nmr-data-handling-and-pre-processing.html", "2.3 NMR data handling and (pre-)processing", " 2.3 NMR data handling and (pre-)processing "],
["uv-data-handling-and-pre-processing.html", "2.4 UV data handling and (pre-)processing", " 2.4 UV data handling and (pre-)processing "],
["statistical-analysis-of-metabolomics-data.html", "2.5 Statistical analysis of metabolomics data", " 2.5 Statistical analysis of metabolomics data "],
["handling-of-molecule-structures-and-chemical-structure-databases.html", "2.6 Handling of molecule structures and chemical structure databases", " 2.6 Handling of molecule structures and chemical structure databases "],
["network-analysis-and-biochemical-pathways.html", "2.7 Network analysis and biochemical pathways", " 2.7 Network analysis and biochemical pathways 2.7.1 Network infrastructure and analysis 2.7.2 Metabolite annotation 2.7.3 Generation of metabolic networks 2.7.4 Pathway analysis 2.7.5 Pathway resources and interfaces "],
["multifunctional-workflows.html", "2.8 Multifunctional workflows", " 2.8 Multifunctional workflows "],
["user-interfaces-and-workflow-management-systems.html", "2.9 User interfaces and workflow management systems", " 2.9 User interfaces and workflow management systems "],
["metabolomics-data-sets.html", "2.10 Metabolomics data sets", " 2.10 Metabolomics data sets "],
["conclusions.html", "Chapter 3 Conclusions", " Chapter 3 Conclusions "],
["appendices.html", "Chapter 4 Appendices", " Chapter 4 Appendices "],
["appendix-1-the-msp-file-format-and-package-support.html", "Appendix 1: The MSP File Format and package support", " Appendix 1: The MSP File Format and package support Name: unknown Num Peaks: 2 85.345 100; 76.321 50; Listing S1: Example for the basic NIST format. Name: 1-MethylhistidineSynon: (2S)-2-amino-3-(1-methyl-1H-imidazol-4-yl)propanoic acidSYNON: $:00in-sourceDB#: HMDB0000001_c_ms_1469InChIKey: BRMWTNUJHUMWMS-LURJTMIESA-NInstrument_type: GC-MSRetention_index: 1807.71Formula: C7H11N3O2MW: 169ExactMass: 169.0851Comments: “column=5%-phenyl-95%-dimethylpolysiloxane capillary column” “derivatization type=2 TMS” “derivatization formula=C13H27N3O2Si2” “derivative mw=313.544” “retention index=1807.71” “retention index type=based on 9 n-alkanes (C10–C36)” “instrument type=GC-MS” “chromatography type=GC” “cas number=332-80-9” “molecular formula=C7H11N3O2” “total exact mass=169.085126592” “InChIKey=BRMWTNUJHUMWMS-LURJTMIESA-N”Num Peaks: 10 70 0.014; 71 0.007; 72 0.02; 76 0.008; 77 0.008; 78 0.002; 79 0.003; 80 0.005; 81 0.108; 82 0.017; NAME: Aspartame; LC-ESI-ITFT; MS2; CEPRECURSORMZ: 295.128848PRECURSORTYPE: [M+H]+INSTRUMENTTYPE: LC-ESI-ITFTSMILES: COC(=O)C(CC1=CC=CC=C1)N=C(O)C(N)CC(O)=OINCHIKEY: IAOZJIPTCAWIRG-UHFFFAOYNA-NOntology: PeptidesCOLLISIONENERGY: 35FORMULA: C14H18N2O5RETENTIONTIME: IONMODE: PositiveComment: registered in MassBankNum Peaks: 9120.0804 13180.10201 138217.0968 14235.10789 390245.0921 274260.09171 132263.1026 286277.11859 1000278.1022 28 Listing S2: Example for the canonical NIST format. Listing S3: RIKEN PRIME msp format example. Table S1: Overview of MS/MS handling in different R packages. ‘-’ means not available, for the remaining entries see the text above. package read msp write msp spectral matching and additional information baitmet N vs DB; cosine, Stein &amp; Scott composite similarity product compMS2Miner NIST, RIKEN PRIME msp RIKEN PRIME msp N vs DB; dot product enviGCMS basic NIST erah NIST only result export N vs DB; cosine flagme only result export metaMS NIST NIST; slow 1 vs DB, N vs DB; proprietary MatchWeiz N vs DB; X-Rank MetCirc N vs N; normalized dot product; will switch to MSnbase functions soon MSeasy only result export N vs DB; Queries the NIST mass spectral search tool MSnbase ** ** 1 vs 1, N vs N; dot product and more, user def. msPurity N vs DB; dot product OrgMassSpecR basic NIST basic NIST 1 vs 1; normalized dot product RAMClustR RAMClustR can import and utilize spectrum similarities from MS-FINDER; rTANDEM N vs DB; dot product; R wrapper for X!Tandem software SwathXtend - (PeakView / OpenSWATH) - (PeakView / OpenSWATH) TargetSearch NIST (with error) NIST N vs DB; RI-based "],
["appendix-2-metarbolomics-dependencies-network.html", "Appendix 2: metaRbolomics dependencies network", " Appendix 2: metaRbolomics dependencies network Libraries and settings options(&quot;repos&quot; = list(CRAN=&quot;http://cran.rstudio.com/&quot;)) library(devtools) # for revdp() ## Loading required package: usethis library(igraph) # for graph_from_edgelist/( and simplify() ) ## ## Attaching package: &#39;igraph&#39; ## The following objects are masked from &#39;package:purrr&#39;: ## ## compose, simplify ## The following objects are masked from &#39;package:dplyr&#39;: ## ## as_data_frame, groups, union ## The following objects are masked from &#39;package:stats&#39;: ## ## decompose, spectrum ## The following object is masked from &#39;package:base&#39;: ## ## union library(visNetwork) # for visNetwork() and friends library(networkD3) # for saveNetwork() ## ## Attaching package: &#39;networkD3&#39; ## The following object is masked from &#39;package:DT&#39;: ## ## JS library(chromote) # for default_chromote_object() ## Registered S3 method overwritten by &#39;fastmap&#39;: ## method from ## print.key_missing shiny library(webshot2) # for webshot() library(png) # For displaying an image library(dplyr) library(purrr) source(&quot;revDepNetHelper.R&quot;) set_default_chromote_object(Chromote$new(browser = Chrome$new(args = &quot;--no-sandbox&quot;))) Read package names from our table reviewTables &lt;- read.delim(&quot;data/AllMetaRbolomicsTables.csv&quot;, stringsAsFactors = FALSE) reviewPkgs &lt;- reviewTables[,&quot;Package&quot;] pkgs &lt;- reviewPkgs Get reverse dependencies For CRAN and BioC packages el &lt;- sapply(pkgs, function(pkg) { rd &lt;- revdep(pkg, dependencies = c(&quot;Depends&quot;, &quot;Imports&quot;, &quot;LinkingTo&quot;), recursive = FALSE, ignore = NULL, bioconductor = TRUE) as.matrix(cbind(Package=rep(pkg, length.out=length(rd)), ReverseDep=rd)) }) el &lt;- do.call(rbind, el) For GitHub and GitLab The above devtools::revdep cannot read from GitHub/GitLab repositories. We have a helper function that downloads and parses the DESCRIPTION file from GitHub/GitLab. Since we cannot get reverse dependencies directly for GitHub/GitLab packages, those packages they are only used as additional reverse depedencies for the CRAN/BioC packages. gitdeps_reverse &lt;- reviewTables %&gt;% mutate(dep_tree = map(Code_link, get_git_deps)) %&gt;% pull(dep_tree) %&gt;% bind_rows() %&gt;% filter(Dep %in% el[,&quot;Package&quot;]) %&gt;% rename(Package = Dep, ReverseDep = Package) %&gt;% as.matrix() ## Loading required package: desc ## ## Attaching package: &#39;desc&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## desc ## Warning in readLines(file): incomplete final line found on &#39;/tmp/ ## Rtmp5z1ADy/file3b9516bd3145&#39; ## Warning in readLines(file): incomplete final line found on &#39;/tmp/ ## Rtmp5z1ADy/file3b957b0fd9f9&#39; el &lt;- rbind(el, gitdeps_reverse) Building dependency network In total, we were analysing 288 packages. For each package, this returns the set of packages in CRAN or BioC that depend on, import from or link to the package (i.e., its direct reverse dependencies) using the devtools::revdep() function. A few packages with the highest number of reverse dependencies have been excluded, as they would dominate the visualisation. It was not possible to detect reverse dependencies from other hosting places such as GitHub or GitLab. From the total, 68 packages had at least one such reverse dependency. ## Remove packages with most reverse dependencies ## which would dominate the network el &lt;- el[! el[,&quot;Package&quot;] %in% c(&quot;Rcpp&quot;, &quot;igraph&quot;, &quot;vegan&quot;, &quot;caret&quot;, &quot;rJava&quot;, &quot;reticulate&quot;), ] ## Create graph, and simplify redundancy g &lt;- graph_from_edgelist(el, directed = TRUE) g &lt;- igraph::simplify(g, remove.multiple = TRUE, remove.loops = TRUE) # get data and plot : data &lt;- toVisNetworkData(g) data$nodes &lt;- cbind(data$nodes, font.size=30, color.background = ifelse(data$nodes[,&quot;id&quot;] %in% pkgs , rgb(0, 0, 200, 128, max = 255), rgb(0, 200, 0, 128, max = 255))) vn &lt;- visNetwork(nodes = data$nodes, edges = data$edges, width=1000, height=1000) %&gt;% visPhysics(timestep = 0.3, barnesHut = list(centralGravity=0.35, springLength = 95)) %&gt;% visOptions(highlightNearest = TRUE) vn Figure S1: Dependency network of R packages. Shown in blue are packages mentioned in the review. Edges connect to packages that depend on another package, as long as that is in CRAN or BioC. Green nodes correspond to packages in CRAN or BioC not covered in the review. Not shown are 1) infrastructure packages e.g. rJava, Rcpp 2) packages from the review without reverse dependencies and 3) data packages. Some packages from the review are not in current versions of CRAN or BioC. An interactive version of this figure is available from https://stanstrup.gitlab.io/metaRbolomics-book/appendix-2-metarbolomics-dependencies-network.html. Save network plot saveNetwork(vn, &quot;vn.html&quot;) webshot(&quot;vn.html&quot;, &quot;revDepNet-60.png&quot;, delay = 60) vnZoom &lt;- visNetwork(nodes = data$nodes, edges = data$edges, width=1000, height=1000) %&gt;% visIgraphLayout()%&gt;% visEvents(type=&quot;once&quot;, startStabilizing = &#39;function() { this.fit({nodes:[&quot;ptw&quot;, &quot;Rnmr1D&quot;, &quot;RpeakChrom&quot;, &quot;alsace&quot;, &quot;PepsNMR&quot;, &quot;ASICS&quot;, &quot;MODIS&quot;, &quot;RGCxGC&quot;]}) }&#39;) saveNetwork(vnZoom, &quot;vnZoom.html&quot;) webshot(&quot;vnZoom.html&quot;, &quot;revDepNet-zoom.png&quot;, delay = 5) You ca access the files at: vn.html revDepNet-60.png vnZoom.html revDepNet-zoom.png Notes The source code for this page is on GitHub at gitlab.com/stanstrup/metaRbolomics-book The HTML output is shown at https://stanstrup.gitlab.io/metaRbolomics-book/appendix-2-metarbolomics-dependencies-network.html and https://stanstrup.gitlab.io/metaRbolomics-book/vn.html (Caveat: long rendering time, blank page without any visible progress) This page was created with the following packages: sessionInfo() ## R version 3.6.1 (2017-01-27) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 16.04.6 LTS ## ## Matrix products: default ## BLAS: /home/travis/R-bin/lib/R/lib/libRblas.so ## LAPACK: /home/travis/R-bin/lib/R/lib/libRlapack.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] desc_1.2.0 png_0.1-7 webshot2_0.0.0.9000 ## [4] chromote_0.0.0.9001 networkD3_0.4 visNetwork_2.0.8 ## [7] igraph_1.2.4.1 devtools_2.2.0 usethis_1.5.1 ## [10] tikzDevice_0.12.3 purrr_0.3.2 kableExtra_1.1.0 ## [13] dplyr_0.8.3 DT_0.8 readr_1.3.1 ## [16] knitr_1.24 ## ## loaded via a namespace (and not attached): ## [1] httr_1.4.1 pkgload_1.0.2 jsonlite_1.6 ## [4] viridisLite_0.3.0 shiny_1.3.2 assertthat_0.2.1 ## [7] BiocManager_1.30.4 yaml_2.2.0 remotes_2.1.0 ## [10] sessioninfo_1.1.1 pillar_1.4.2 backports_1.1.4 ## [13] glue_1.3.1 digest_0.6.20 promises_1.0.1.9002 ## [16] rvest_0.3.4 colorspace_1.4-1 websocket_1.1.0 ## [19] htmltools_0.3.6 httpuv_1.5.2 pkgconfig_2.0.2 ## [22] bookdown_0.13.2 xtable_1.8-4 scales_1.0.0 ## [25] webshot_0.5.1 processx_3.4.1 later_0.8.0.9003 ## [28] tibble_2.1.3 ellipsis_0.2.0.1 withr_2.1.2 ## [31] cli_1.1.0 magrittr_1.5 crayon_1.3.4 ## [34] mime_0.7 memoise_1.1.0 evaluate_0.14 ## [37] ps_1.3.0 fs_1.3.1 xml2_1.2.2 ## [40] pkgbuild_1.0.5 tools_3.6.1 prettyunits_1.0.2 ## [43] hms_0.5.1 stringr_1.4.0 munsell_0.5.0 ## [46] callr_3.3.1 compiler_3.6.1 rlang_0.4.0 ## [49] grid_3.6.1 rstudioapi_0.10 htmlwidgets_1.3 ## [52] filehash_2.4-2 crosstalk_1.0.0 rmarkdown_1.15 ## [55] testthat_2.2.1 codetools_0.2-16 curl_4.0 ## [58] R6_2.4.0 fastmap_1.0.0 zeallot_0.1.0 ## [61] rprojroot_1.3-2 stringi_1.4.3 Rcpp_1.0.2 ## [64] vctrs_0.2.0 tidyselect_0.2.5 xfun_0.9 "]
]
