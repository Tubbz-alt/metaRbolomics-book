[
["index.html", "The MetaRbolomics book Preface How to", " The MetaRbolomics book Jan Stanstrup, Corey D. Broeckling, Rick Helmus, Nils Hoffmann, Ewy Mathé, Thomas Naake, Luca Nicolotti, Kristian Peters, Johannes Rainer, Reza M. Salek, Tobias Schulze, Emma L. Schymanski, Michael A. Stravs, Etienne A Thévenot, Hendrik Treutler, Ralf J. M. Weber, Egon Willighagen, Michael Witting, Steffen Neumann Preface How to Download data The list of packages found in the tables in this book can be downloaded from public/data/AllMetaRbolomicsTables.csv. Add packages to the tables Go to the googlesheet and add the package. Please be careful with adding it to the right section. If it belongs in more than one table add it mulitple times as appropiate. The package will not appear instantly in the book but only after a change is made to the book itself. You can also open an issue and request the reload such that the package shows up. Contributing to the text There are several options. In order of convenience for the maintainer you can: make a pull request on the GitHub repository. You will find the text in the rmd folder. open an issue with the text you want to contribute. Clearly indicate where the text belongs. Send your contribution by email to jst( a t )nexs.ku.dk. Remember to add yourself to author contributions. "],
["0100-introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Metabolomics aims to measure, identify and (semi-)quantify a large number of metabolites in a biological system. The methods of choice are generally Nuclear Magnetic Resonance (NMR) spectroscopy or Mass Spectrometry (MS). The latter can be used directly (e.g. direct infusion MS), but is normally coupled to a separation system such as Gas Chromatography (GC-MS), Liquid Chromatography (LC-MS) or Capillary Electrophoresis (CE-MS). In order to increase the separation power multidimensional separation systems are becoming common, such as comprehensive two-dimensional GC or LC (GC×GC, LC×LC) or LC combined with ion mobility spectrometry (LC-IMS) before MS detection. Other detection techniques include Raman spectroscopy, UV/VIS (ultraviolet/visible absorbance spectrophotometric detection- typically with a Diode Array Detector (DAD)) and fluorescence. NMR also benefits from separation techniques, such as LC-MS-NMR or LC-SPE-NMR. Additionally, there are a wide variety of pulse programs commonly used in 1D and even bigger set of 2D pulse programs used in metabolomics and for metabolite identification, for a comprehensive review on this see [1]. A general introduction to metabolomics can be found in textbooks like [2–4] or online courses like [5,6]. All of these analytical platforms and methodologies generate large amounts of high dimensional and complex experimental raw data when used in a metabolomics context. The amount of data, the need for reproducible research, and the complexities of the biological problem under investigation necessitates a high degree of automation and standard workflows in the data analysis. Beside vendor software, which is usually not open, open source projects offer the possibility to work in community-driven teams, perform reproducible data analysis and to work with different types of raw data. Many tools and methods have been developed to facilitate the processing and analysis of metabolomics data; most seek to solve a specific challenge in the multi-step data processing and analysis workflow. This review provides an overview of the metabolomics-related tools that are made available as packages (and a limited number of non-trivial, non-packaged scripts) for the statistics environment and programming language R [7]. We have included packages even if they are not anymore part of current CRAN or Bioconductor, i.e. as archived versions only. We have not included packages described in the literature if no longer available for download at all. We did include packages that are currently available, but not yet published in the scientific literature. The package descriptions have been grouped in sections according to the typical steps in the metabolomics data analysis pipeline for different analytical technologies, following the typical workflow steps from MS, NMR and UV data analysis, metabolite annotation, statistical analysis, molecular structure, network and pathway analysis and finally covering packages embracing large parts of the workflow. "],
["0101-introduction-Metabolomics_data_processing_and_analysis.html", "1.1 Metabolomics data processing and analysis", " 1.1 Metabolomics data processing and analysis Figure 1: Overview of typical tasks in metabolomics workflows, ranging from metabolite profiling (left, green) via metabolite annotation (center, purple) to data analysis using statistics and metabolite networks (right, red). The remainder of this section gives a broad overview and explains the typical steps, which are summarized in Figure 1, while common approaches and the available R packages are described in more detail in Section 2. The first step for any metabolomics study is conversion from vendor formats into open data formats and pre-processing of the obtained raw data. The latter entails converting chromatographic (usually hyphenated to MS) or spectroscopic data into a data matrix suitable for data analysis. For LC-MS data this typically involves feature detection (or peak-picking) in individual samples followed by matching of features between samples. For spectroscopic data, this typically means alignment of spectra and potentially binning of the spectra into ‘buckets’. The final matrix will have samples in one dimension and so-called features (unique chromatographic features or spectral bins) in the other dimension. In NMR based metabolomics, several steps are carried out to process raw time domain data to a spectrum to improve quality such as phasing and baseline correction of the spectrum. Next is alignment of peaks across spectra and samples, followed by segmenting data into bins or a peak fitting step depending on the method used. Once the analytical data has been preprocessed, it is generally subjected to different statistical approaches to find features that are “interesting” in the context of the experimental design, e.g. differentiating diseased patients from healthy controls. In untargeted metabolomics, the selected features contain only the characteristics (e.g. m/z, retention time, chemical shift, intensity) obtained from the measurement, but not (yet) the metabolite identification or chemical structure as such. Different approaches exist for this metabolite annotation step, ranging from (usually insufficient) database lookup of exact mass (MS) or chemical shift (NMR) alone, to the use of fragmentation patterns obtained in tandem MS experiments, which can be searched against spectral databases or analysed with in silico algorithms, to spectral searching or de novo structure elucidation using combinations of NMR experiments (often 1D and 2D). Large parts of the metabolomics software landscape in general have been covered in reviews, recent ones include the large list of software packages [8] first described by Spicer et al. [9], and a series of annual reviews covering the list maintained by Misra and others [10–13], a review by Kannan et al. [14] and the review focussing on approaches for compound identification of LC-MS/MS data by Blaženović et al. [15]. These reviews did include software regardless of the programming environment or language used for the implementation. In section 2.9 we briefly mention how those can be accessed from within R. This review will focus on the ecosystem of R packages for metabolomics. It provides an overview of packages to carry out one or multiple of the above mentioned steps. Some aspects are not covered in depth or not at all. For example, MS based imaging in metabolomics is an area that has unique challenges and merits its own review, and it is also beyond the scope of this review to discuss all statistical methods that could be applied in metabolomics. "],
["0102-introduction-The_R_package_landscape.html", "1.2 The R package landscape", " 1.2 The R package landscape The core of the R language was started in 1997 and provided the basic functionality of a programming language, with some functions targeting statistics. The real power driving the popularity of R today is the huge number of contributed packages providing algorithms and data types for a myriad of application realms. Many packages have an Open Source license. This is not a phenomenon exclusive to R, but is rather a positive cultural aspect of bioinformatics software being mostly published under Open Source license terms, regardless of the implementation language. An R interpreter can be embedded in several other languages to execute R code snippets, and R code can also be executed via different workflow systems (e.g. KNIME or Galaxy, see section 2.9), which is beneficial for analysis workflows, interoperability and reuse. These packages are typically hosted on platforms that serve as an umbrella project and are a “home” for the developer and user communities. The Comprehensive R Archive Network (CRAN) repository contains over 14,500 packages for many application areas, including some for bioinformatics and metabolomics. The “CRAN Task Views”, which are manually curated resources describing available packages, books etc, help users navigate CRAN and find packages for a particular task. For metabolomics, the most relevant Task View is “Chemometrics and Computational Physics” [16] edited by Katharine Mullen, which includes sections on Spectroscopy, Mass Spectrometry and other tasks relevant for metabolomics applications. The Bioconductor project (BioC for short) was started by a team around Robert Gentleman in 2001 [17], and has become a vibrant community of around 1,000 contributors, working on 1,741 software, 371 data and 948 annotation packages (BioC release 3.9). In addition to a rich development infrastructure (website, developer infrastructure, version control, build farm, etc) there are regular workshops for developers and users. To enable reproducible research, BioC runs bi-annual software releases tied to a particular R release, thus ensuring and guaranteeing interoperability of packages within the same BioC release and allowing to install BioC packages from a certain release to reproduce or repeat old data analyses. On both CRAN and BioC, each package has a landing page pointing to sources, build information, binary packages and documentation. On BioC, packages are sorted (by their respective authors) into “BiocViews”, where most packages are targeting genomics and gene expression analysis, and the most relevant ones for metabolomics are Cheminformatics (containing 11 packages), Lipidomics (11), SystemsBiology (66) and, of course, Metabolomics (56). Bioconductor workflows (organised as separate BioC View [18]) provide well documented examples of typical analyses. For community support, BioC maintains mailing lists, a web-based support site, slack communication channels and more. Both CRAN and BioC have a well-defined process for accepting new packages, and the respective developer guidelines (see guidelines for CRAN [19] and for BioC [20]) cover the package life-cycle from submission, updates and maintenance, to deprecation/orphaning of packages. In the case of BioC, new submissions undergo a peer review process, which also provides feedback on technical aspects and integration with the BioC landscape. A smaller number of packages are also hosted on sites like rforge.net, r-forge.wu-wien.ac.at [21], or sourceforge.net (SF). The non-profit initiative rOpenSci [22] maintains an ecosystem around reproducible research, including staff and community-contributed R packages with additional peer review. Currently, there are no specific metabolomics related packages. The GitHub (and also GitLab, Bitbucket) hosting services are not specific to R development, but have gained a lot of popularity due to their excellent support for participation and contribution to software projects. The maintenance of BioC packages on one of the git-based sites has become easier since the BioC team migrated to git as its version control system. A downside of these generic repository hosting sites is that there is no central point of entry, and finding packages for specific tasks is difficult compared with dedicated platforms and relies on search engines and publications. Also, while these hosting services make it easier to provide packages that do not meet BioC and CRAN requirements (e.g. rinchi due to limitations in the InChI algorithm itself), it also allows users to postpone (or circumvent entirely) the review process that helps ensure the quality of BioC contributions. In addition to generic search engines like Google.com or Bing.com, the rdrr.io is a comprehensive index of R packages and documentation from CRAN, Bioconductor, GitHub and R-Forge. Initially, its main purpose was to find R packages by name, perform full-text search in package documentation, functions and R source code. Recently, it also serves as hub to actually run R code without local installation, see Section 2.9. "],
["0103-introduction-Dependences_and_connectivity_of_metabolomics_packages.html", "1.3 Dependences and connectivity of metabolomics packages", " 1.3 Dependences and connectivity of metabolomics packages Figure 2: Dependency network of R packages. Shown in blue are packages mentioned in the review. Edges connect to packages that depend on another package, as long as they are in CRAN or BioC. Green nodes correspond to packages in CRAN or BioC not covered in the review. The inset shows the neighbourhood of the ptw package. Not shown are 1) infrastructure packages, e.g. rJava, Rcpp 2) packages from the review without reverse dependencies and 3) data packages. Some packages from the review are not in current versions of CRAN or BioC. An interactive version of this figure is also available online (rformassspectrometry.github.io/metaRbolomics-book, Appendix 2) and as supplemental file 2. Code reuse and object inheritance can be a sign for a well-connected and interacting community. At the useR!2015 and JSM2015 conferences, A. de Vries and J. Rickert (both Microsoft, London, UK) showed the analysis of the CRAN and BioC dependency network structure [23–25]. Compared to CRAN, BioC packages had a higher connectivity: “It seems that the Bioconductor policy encourages package authors to reuse existing material and write packages that work better together”. We repeated such an analysis [26] with the packages mentioned in this review and created a network of reverse dependencies (i.e., the set of packages that depend on these metabolomics related packages in BioC or CRAN). The resulting network is shown in Figure 2. "],
["0200-R_packages_for_metabolomics.html", "Chapter 2 R-packages for metabolomics", " Chapter 2 R-packages for metabolomics "],
["0201-R_packages_for_metabolomics-Mass_spectrometry_data_handling_and_pre_processing.html", "2.1 Mass spectrometry data handling and (pre-)processing", " 2.1 Mass spectrometry data handling and (pre-)processing 2.1.1 Profile mode and centroided data 2.1.2 Direct infusion mass spectrometry data 2.1.3 Hyphenated MS and non-targeted data 2.1.4 Targeted data and alternative representations of data 2.1.5 Additional dimensionality 2.1.6 Structuring data and metadata 2.1.7 Ion species grouping and annotation "],
["0202-R_packages_for_metabolomics-Metabolite_identification_with_MS_MS_data.html", "2.2 Metabolite identification with MS/MS data", " 2.2 Metabolite identification with MS/MS data 2.2.1 MS/MS data handling, spectral matching and clustering 2.2.2 Reading of spectral databases "],
["0203-R_packages_for_metabolomics-NMR_data_handling_and_pre_processing.html", "2.3 NMR data handling and (pre-)processing", " 2.3 NMR data handling and (pre-)processing "],
["0204-R_packages_for_metabolomics-UV_data_handling_and_pre_processing.html", "2.4 UV data handling and (pre-)processing", " 2.4 UV data handling and (pre-)processing "],
["0205-R_packages_for_metabolomics-Statistical_analysis_of_metabolomics_data.html", "2.5 Statistical analysis of metabolomics data", " 2.5 Statistical analysis of metabolomics data "],
["0206-R_packages_for_metabolomics-Handling_of_molecule_structures_and_chemical_structure_databases.html", "2.6 Handling of molecule structures and chemical structure databases", " 2.6 Handling of molecule structures and chemical structure databases "],
["0207-R_packages_for_metabolomics-Network_analysis_and_biochemical_pathways.html", "2.7 Network analysis and biochemical pathways", " 2.7 Network analysis and biochemical pathways 2.7.1 Network infrastructure and analysis 2.7.2 Metabolite annotation 2.7.3 Generation of metabolic networks 2.7.4 Pathway analysis 2.7.5 Pathway resources and interfaces "],
["0208-R_packages_for_metabolomics-Multifunctional_workflows.html", "2.8 Multifunctional workflows", " 2.8 Multifunctional workflows "],
["0209-R_packages_for_metabolomics-User_interfaces_and_workflow_management_systems.html", "2.9 User interfaces and workflow management systems", " 2.9 User interfaces and workflow management systems "],
["0210-R_packages_for_metabolomics-Metabolomics_data_sets.html", "2.10 Metabolomics data sets", " 2.10 Metabolomics data sets "],
["0300-conclusion.html", "Chapter 3 Conclusions", " Chapter 3 Conclusions "],
["0400-references.html", "References", " References 1. Emwas, A.-H.; Roy, R.; McKay, R.T.; Tenori, L.; Saccenti, E.; Gowda, G.A.N.; Raftery, D.; Alahmari, F.; Jaremko, L.; Jaremko, M. et al. NMR spectroscopy for metabolomics research. Metabolites 2019, 9. 2. Metabolomics in practice: Successful strategies to generate and analyze metabolic data; Lämmerhofer, M., Weckwerth, W., Eds.; Wiley-VCH Verlag GmbH &amp; Co. KGaA: Weinheim, Germany, 2013; ISBN 9783527330898. 3. Villas-Boas, S.G.; Nielsen, J.; Smedsgaard, J.; Hansen, M.A.E.; Roessner-Tunali, U. Metabolome analysis: An introduction; 1st ed.; Wiley, John &amp; Sons, Incorporated, 2007; p. 319; ISBN 978-0-471-74344-6. 4. Metabolomics: Practical guide to design and analysis; Wehrens, R., Salek, R., Eds.; Chapman &amp; hall/CRC mathematical and computational biology; Chapman; Hall/CRC, 2019; ISBN 1498725260. 5. International Metabolomics Society Free Tools &amp; Learning Resources - Metabolomics Society Wiki. 6. Salek, R.; Emery, L.; Beisken, S. Metabolomics: An introduction EMBL-EBI train online. 7. R Core Development Team R: A language and environment for statistical computing 2018. 8. Spicer, R. GitHub - RASpicer/MetabolomicsTools 2018. 9. Spicer, R.; Salek, R.M.; Moreno, P.; Cañueto, D.; Steinbeck, C. Navigating freely-available software tools for metabolomics analysis. Metabolomics : Official journal of the Metabolomic Society 2017, 13, 106. 10. Misra, B.B.; Hooft, J.J.J. van der Updates in metabolomics tools and resources: 2014-2015. Electrophoresis 2016, 37, 86–110. 11. Misra, B.B.; Fahrmann, J.F.; Grapov, D. Review of emerging metabolomic tools and resources: 2015-2016. Electrophoresis 2017, 38, 2257–2274. 12. Misra, B.B. New tools and resources in metabolomics: 2016-2017. Electrophoresis 2018, 39, 909–923. 13. Misra, B. GitHub - biswapriyamisra/metabolomics: Tools databases resources in metabolomics &amp; integrated omics in 2015-2016 2017. 14. Kannan, L.; Ramos, M.; Re, A.; El-Hachem, N.; Safikhani, Z.; Gendoo, D.M.A.; Davis, S.; Gomez-Cabrero, D.; Castelo, R.; Hansen, K.D. et al. Public data and open source tools for multi-assay genomic investigation of disease. Briefings in Bioinformatics 2016, 17, 603–615. 15. Blaženović, I.; Kind, T.; Ji, J.; Fiehn, O. Software tools and approaches for compound identification of LC-MS/MS data in metabolomics. Metabolites 2018, 8. 16. Mullen, K. CRAN task view: Chemometrics and computational physics 2019. 17. Gentleman, R.C.; Carey, V.J.; Bates, D.M.; Bolstad, B.; Dettling, M.; Dudoit, S.; Ellis, B.; Gautier, L.; Ge, Y.; Gentry, J. et al. Bioconductor: Open software development for computational biology and bioinformatics. Genome Biology 2004, 5, R80. 18. Bioconductor Bioconductor - BiocViews. 19. The Comprehensive R Archive Network CRAN repository policy. 20. Bioconductor Bioconductor - developers. 21. Theußl, S.; Zeileis, A. Collaborative software development using r-forge. The R journal 2009, 1, 9. 22. Boettiger, C.; Chamberlain, S.; Hart, E.; Ram, K. Building software, building community: Lessons from the rOpenSci project. Journal of open research software 2015, 3. 23. Vries, A. de; Rickert, J. The network structure of r packages on CRAN &amp; BioConductor 2015. 24. Vries, A. de Differences in the network structure of CRAN and BioConductor (revolutions) 2015. 25. Vries, A. de GitHub - andrie/cran-network-structure: Scripts used for my UseR!2015 presentation on the network structure of CRAN 2015. 26. Neumann, S. GitHub - sneumann/metaRbolomics: Metabolomics in r and bioconductor 2019. "],
["9900-Appendices.html", "Chapter 4 Appendices", " Chapter 4 Appendices "],
["9901-Appendices-Appendix_1_The_MSP_File_Format_and_package_support.html", "Appendix 1: The MSP File Format and package support", " Appendix 1: The MSP File Format and package support Name: unknown Num Peaks: 2 85.345 100; 76.321 50; Listing S1: Example for the basic NIST format. Name: 1-MethylhistidineSynon: (2S)-2-amino-3-(1-methyl-1H-imidazol-4-yl)propanoic acidSYNON: $:00in-sourceDB#: HMDB0000001_c_ms_1469InChIKey: BRMWTNUJHUMWMS-LURJTMIESA-NInstrument_type: GC-MSRetention_index: 1807.71Formula: C7H11N3O2MW: 169ExactMass: 169.0851Comments: “column=5%-phenyl-95%-dimethylpolysiloxane capillary column” “derivatization type=2 TMS” “derivatization formula=C13H27N3O2Si2” “derivative mw=313.544” “retention index=1807.71” “retention index type=based on 9 n-alkanes (C10–C36)” “instrument type=GC-MS” “chromatography type=GC” “cas number=332-80-9” “molecular formula=C7H11N3O2” “total exact mass=169.085126592” “InChIKey=BRMWTNUJHUMWMS-LURJTMIESA-N”Num Peaks: 10 70 0.014; 71 0.007; 72 0.02; 76 0.008; 77 0.008; 78 0.002; 79 0.003; 80 0.005; 81 0.108; 82 0.017; NAME: Aspartame; LC-ESI-ITFT; MS2; CEPRECURSORMZ: 295.128848PRECURSORTYPE: [M+H]+INSTRUMENTTYPE: LC-ESI-ITFTSMILES: COC(=O)C(CC1=CC=CC=C1)N=C(O)C(N)CC(O)=OINCHIKEY: IAOZJIPTCAWIRG-UHFFFAOYNA-NOntology: PeptidesCOLLISIONENERGY: 35FORMULA: C14H18N2O5RETENTIONTIME: IONMODE: PositiveComment: registered in MassBankNum Peaks: 9120.0804 13180.10201 138217.0968 14235.10789 390245.0921 274260.09171 132263.1026 286277.11859 1000278.1022 28 Listing S2: Example for the canonical NIST format. Listing S3: RIKEN PRIME msp format example. Table S1: Overview of MS/MS handling in different R packages. ‘-’ means not available, for the remaining entries see the text above. package read msp write msp spectral matching and additional information baitmet N vs DB; cosine, Stein &amp; Scott composite similarity product compMS2Miner NIST, RIKEN PRIME msp RIKEN PRIME msp N vs DB; dot product enviGCMS basic NIST erah NIST only result export N vs DB; cosine flagme only result export metaMS NIST NIST; slow 1 vs DB, N vs DB; proprietary MatchWeiz N vs DB; X-Rank MetCirc N vs N; normalized dot product; will switch to MSnbase functions soon MSeasy only result export N vs DB; Queries the NIST mass spectral search tool MSnbase ** ** 1 vs 1, N vs N; dot product and more, user def. msPurity N vs DB; dot product OrgMassSpecR basic NIST basic NIST 1 vs 1; normalized dot product RAMClustR RAMClustR can import and utilize spectrum similarities from MS-FINDER; rTANDEM N vs DB; dot product; R wrapper for X!Tandem software SwathXtend - (PeakView / OpenSWATH) - (PeakView / OpenSWATH) TargetSearch NIST (with error) NIST N vs DB; RI-based "],
["9902-Appendices-Appendix_2_metaRbolomics_dependencies.html", "Appendix 2: metaRbolomics dependencies network", " Appendix 2: metaRbolomics dependencies network Libraries and settings options(&quot;repos&quot; = list(CRAN=&quot;http://cran.rstudio.com/&quot;)) library(devtools) # for revdp() ## Loading required package: usethis library(igraph) # for graph_from_edgelist/( and simplify() ) ## ## Attaching package: &#39;igraph&#39; ## The following objects are masked from &#39;package:purrr&#39;: ## ## compose, simplify ## The following objects are masked from &#39;package:dplyr&#39;: ## ## as_data_frame, groups, union ## The following objects are masked from &#39;package:stats&#39;: ## ## decompose, spectrum ## The following object is masked from &#39;package:base&#39;: ## ## union library(visNetwork) # for visNetwork() and friends library(networkD3) # for saveNetwork() ## ## Attaching package: &#39;networkD3&#39; ## The following object is masked from &#39;package:DT&#39;: ## ## JS library(chromote) # for default_chromote_object() ## Registered S3 method overwritten by &#39;fastmap&#39;: ## method from ## print.key_missing shiny library(webshot2) # for webshot() library(png) # For displaying an image library(dplyr) library(purrr) source(&quot;scripts/revDepNetHelper.R&quot;) set_default_chromote_object(Chromote$new(browser = Chrome$new(args = &quot;--no-sandbox&quot;))) Read package names from our table reviewTables &lt;- read.delim(&quot;public/data/AllMetaRbolomicsTables.csv&quot;, stringsAsFactors = FALSE) reviewPkgs &lt;- reviewTables[,&quot;Package&quot;] pkgs &lt;- reviewPkgs Get reverse dependencies For CRAN and BioC packages el &lt;- sapply(pkgs, function(pkg) { rd &lt;- revdep(pkg, dependencies = c(&quot;Depends&quot;, &quot;Imports&quot;, &quot;LinkingTo&quot;), recursive = FALSE, ignore = NULL, bioconductor = TRUE) as.matrix(cbind(Package=rep(pkg, length.out=length(rd)), ReverseDep=rd)) }) el &lt;- do.call(rbind, el) For GitHub and GitLab The above devtools::revdep cannot read from GitHub/GitLab repositories. We have a helper function that downloads and parses the DESCRIPTION file from GitHub/GitLab. Since we cannot get reverse dependencies directly for GitHub/GitLab packages, those packages they are only used as additional reverse depedencies for the CRAN/BioC packages. gitdeps_reverse &lt;- reviewTables %&gt;% mutate(dep_tree = map(Code_link, get_git_deps)) %&gt;% pull(dep_tree) %&gt;% bind_rows() %&gt;% filter(Dep %in% el[,&quot;Package&quot;]) %&gt;% rename(Package = Dep, ReverseDep = Package) %&gt;% as.matrix() ## Loading required package: desc ## ## Attaching package: &#39;desc&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## desc ## Warning in readLines(file): incomplete final line found on &#39;/tmp/ ## RtmpKYNMBZ/file3bd6572e3a56&#39; ## Warning in readLines(file): incomplete final line found on &#39;/tmp/ ## RtmpKYNMBZ/file3bd628337588&#39; el &lt;- rbind(el, gitdeps_reverse) Building dependency network In total, we were analysing 292 packages. For each package, this returns the set of packages in CRAN or BioC that depend on, import from or link to the package (i.e., its direct reverse dependencies) using the devtools::revdep() function. A few packages with the highest number of reverse dependencies have been excluded, as they would dominate the visualisation. It was not possible to detect reverse dependencies from other hosting places such as GitHub or GitLab. From the total, 68 packages had at least one such reverse dependency. ## Remove packages with most reverse dependencies ## which would dominate the network el &lt;- el[! el[,&quot;Package&quot;] %in% c(&quot;Rcpp&quot;, &quot;igraph&quot;, &quot;vegan&quot;, &quot;caret&quot;, &quot;rJava&quot;, &quot;reticulate&quot;), ] ## Create graph, and simplify redundancy g &lt;- graph_from_edgelist(el, directed = TRUE) g &lt;- igraph::simplify(g, remove.multiple = TRUE, remove.loops = TRUE) # get data and plot : data &lt;- toVisNetworkData(g) data$nodes &lt;- cbind(data$nodes, font.size=30, color.background = ifelse(data$nodes[,&quot;id&quot;] %in% pkgs , rgb(0, 0, 200, 128, max = 255), rgb(0, 200, 0, 128, max = 255))) vn &lt;- visNetwork(nodes = data$nodes, edges = data$edges, width=1000, height=1000) %&gt;% visPhysics(timestep = 0.3, barnesHut = list(centralGravity=0.35, springLength = 95)) %&gt;% visOptions(highlightNearest = TRUE) vn Figure S1: Dependency network of R packages. Shown in blue are packages mentioned in the review. Edges connect to packages that depend on another package, as long as that is in CRAN or BioC. Green nodes correspond to packages in CRAN or BioC not covered in the review. Not shown are 1) infrastructure packages e.g. rJava, Rcpp 2) packages from the review without reverse dependencies and 3) data packages. Some packages from the review are not in current versions of CRAN or BioC. An interactive version of this figure is available from https://stanstrup.gitlab.io/metaRbolomics-book/appendix-2-metarbolomics-dependencies-network.html. Save network plot saveNetwork(vn, &quot;vn.html&quot;) webshot(&quot;vn.html&quot;, &quot;revDepNet-60.png&quot;, delay = 60) vnZoom &lt;- visNetwork(nodes = data$nodes, edges = data$edges, width=1000, height=1000) %&gt;% visIgraphLayout()%&gt;% visEvents(type=&quot;once&quot;, startStabilizing = &#39;function() { this.fit({nodes:[&quot;ptw&quot;, &quot;Rnmr1D&quot;, &quot;RpeakChrom&quot;, &quot;alsace&quot;, &quot;PepsNMR&quot;, &quot;ASICS&quot;, &quot;MODIS&quot;, &quot;RGCxGC&quot;]}) }&#39;) saveNetwork(vnZoom, &quot;vnZoom.html&quot;) webshot(&quot;vnZoom.html&quot;, &quot;revDepNet-zoom.png&quot;, delay = 5) You ca access the files at: vn.html revDepNet-60.png vnZoom.html revDepNet-zoom.png Notes The source code for this page is on GitHub at gitlab.com/stanstrup/metaRbolomics-book The HTML output is shown at https://stanstrup.gitlab.io/metaRbolomics-book/appendix-2-metarbolomics-dependencies-network.html and https://stanstrup.gitlab.io/metaRbolomics-book/vn.html (Caveat: long rendering time, blank page without any visible progress) This page was created with the following packages: sessionInfo() ## R version 3.6.1 (2017-01-27) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 16.04.6 LTS ## ## Matrix products: default ## BLAS: /home/travis/R-bin/lib/R/lib/libRblas.so ## LAPACK: /home/travis/R-bin/lib/R/lib/libRlapack.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] desc_1.2.0 png_0.1-7 webshot2_0.0.0.9000 ## [4] chromote_0.0.0.9001 networkD3_0.4 visNetwork_2.0.8 ## [7] igraph_1.2.4.1 devtools_2.2.0 usethis_1.5.1 ## [10] tikzDevice_0.12.3 purrr_0.3.2 kableExtra_1.1.0 ## [13] DT_0.8 dplyr_0.8.3 googlesheets_0.3.0 ## [16] readr_1.3.1 knitr_1.24 ## ## loaded via a namespace (and not attached): ## [1] httr_1.4.1 pkgload_1.0.2 jsonlite_1.6 ## [4] viridisLite_0.3.0 shiny_1.3.2 assertthat_0.2.1 ## [7] BiocManager_1.30.4 cellranger_1.1.0 yaml_2.2.0 ## [10] remotes_2.1.0 sessioninfo_1.1.1 pillar_1.4.2 ## [13] backports_1.1.4 glue_1.3.1 digest_0.6.20 ## [16] promises_1.0.1.9002 rvest_0.3.4 colorspace_1.4-1 ## [19] websocket_1.1.0 htmltools_0.3.6 httpuv_1.5.2 ## [22] pkgconfig_2.0.2 bookdown_0.13.2 xtable_1.8-4 ## [25] scales_1.0.0 webshot_0.5.1 processx_3.4.1 ## [28] later_0.8.0.9004 tibble_2.1.3 ellipsis_0.2.0.1 ## [31] withr_2.1.2 cli_1.1.0 magrittr_1.5 ## [34] crayon_1.3.4 mime_0.7 memoise_1.1.0 ## [37] evaluate_0.14 ps_1.3.0 fs_1.3.1 ## [40] xml2_1.2.2 pkgbuild_1.0.5 tools_3.6.1 ## [43] prettyunits_1.0.2 hms_0.5.1 stringr_1.4.0 ## [46] munsell_0.5.0 callr_3.3.1 compiler_3.6.1 ## [49] rlang_0.4.0 grid_3.6.1 rstudioapi_0.10 ## [52] htmlwidgets_1.3 filehash_2.4-2 crosstalk_1.0.0 ## [55] rmarkdown_1.15 testthat_2.2.1 codetools_0.2-16 ## [58] curl_4.0 R6_2.4.0 fastmap_1.0.0 ## [61] zeallot_0.1.0 rprojroot_1.3-2 stringi_1.4.3 ## [64] Rcpp_1.0.2 vctrs_0.2.0 tidyselect_0.2.5 ## [67] xfun_0.9 "]
]
